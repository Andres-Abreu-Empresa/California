# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ForumPostEntity {
  id: ID!
}

type StudentCourseEntity {
  id: ID!
}

type CourseEntity {
  id: ID!
}

type UserEntity {
  id: ID!
}

type userModel {
  id: ID!
  name: String
  email: String
  role: String
  createdAt: DateTime
  updatedAt: DateTime
  courses: [CourseEntity!]
  enrolledCourses: [StudentCourseEntity!]
  posts: [ForumPostEntity!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type personModel {
  id: String!
  firstName: String!
  lastName: String!
  dateOfBirth: DateTime!
  occupation: String!
  gender: String!
  identityDocument: Float
  ssn: Float
  phoneNumber: Float!
  emailPerson: String!
  address: String
}

type intitutionModel {
  id: String
  institutionName: String!
  typeInstitution: String!
  educationalLevel: String!
  fullAddress: String
  phoneNumber: String!
  email: String
  webPage: String
  dateFounded: String
  Accreditations: String
  programStudy: String
  Director: String
  socialMedia: String
}

type CourseModel {
  id: ID!
  name: String!
  description: String
  professor: UserEntity!
  createdAt: DateTime!
}

type ForumPostModel {
  id: ID!
  course: CourseEntity!
  user: UserEntity!
  parent: ForumPostModel
  replies: [ForumPostModel!]
  content: String!
  createdAt: DateTime!
}

type membershipmodel {
  id: ID!
  name: String!
  price: Float!
  maxCourses: Float!
  durationInDays: Float!
}

type StudentCourseModel {
  id: ID!
  student: UserEntity!
  course: CourseEntity!
}

type TaskSubmissionModel {
  id: ID!
  student: UserEntity!
  content: String
  grade: Float
  feedback: String
  submittedAt: DateTime!
}

type TaskModel {
  id: ID!
  course: CourseEntity!
  title: String!
  description: String
  dueDate: DateTime!
  createdAt: DateTime!
}

type UserMembershipModel {
  id: ID!
  user: userModel!
  membership: membershipmodel!
  startDate: DateTime!
  endDate: DateTime!
  isActive: Boolean!
}

type SubmissionModel {
  id: ID!
}

type Query {
  users: [userModel!]!
  user(id: ID!): userModel!
  persons: [personModel!]!
  person(id: Int!): personModel
  institution: [intitutionModel!]!
  insttitution(id: String!): intitutionModel
  courses: [CourseModel!]!
  course(id: String!): CourseModel!
  forumPosts: [ForumPostModel!]!
  forumPost(id: String!): ForumPostModel!
  memberships: [membershipmodel!]!
  membership(id: String!): membershipmodel!
  studentCourses: [StudentCourseModel!]!
  tasks: [TaskModel!]!
  task(id: String!): TaskModel!
  taskSubmissions: [TaskSubmissionModel!]!
  taskSubmission(id: String!): TaskSubmissionModel!
  userMemberships: [UserMembershipModel!]!
  userMembership(id: String!): UserMembershipModel!
  submissions: [SubmissionModel!]!
  submission(id: ID!): SubmissionModel!
}

type Mutation {
  createUser(input: userInput!): userModel!
  updateUser(id: ID!, input: UpdateUserInput!): userModel!
  createPerson(person: personInput!): personModel!
  updatePerson(person: personInput!): personModel!
  createInstitution(institution: institutionInput!): intitutionModel!
  updateInstitution(institution: institutionInput!): intitutionModel!
  createCourse(input: createcourseinput!): CourseModel!
  removeCourse(id: String!): Boolean!
  createForumPost(input: CreateForumPostInput!): ForumPostModel!
  removeForumPost(id: String!): Boolean!
  createMembership(input: createmembershipinput!): membershipmodel!
  removeMembership(id: String!): Boolean!
  enrollStudent(input: EnrollStudentInput!): StudentCourseModel!
  removeEnrollment(id: String!): Boolean!
  createTask(input: CreateTaskInput!): TaskModel!
  removeTask(id: String!): Boolean!
  submitTask(input: SubmitTaskInput!): TaskSubmissionModel!
  removeTaskSubmission(id: String!): Boolean!
  createUserMembership(input: createusermembershipinput!): UserMembershipModel!
  removeUserMembership(id: String!): Boolean!
  createSubmission(input: CreateSubmissionInput!): SubmissionModel!
  updateSubmission(input: UpdateSubmissionInput!): SubmissionModel!
  removeSubmission(id: ID!): SubmissionModel!
}

input userInput {
  id: ID
  name: String!
  email: String!
  passwordHash: String
  role: String!
}

input UpdateUserInput {
  id: ID
  name: String
  email: String
  passwordHash: String
  role: String
}

input personInput {
  id: String
  firstName: String!
  lastName: String!
  dateOfBirth: DateTime!
  occupation: String!
  gender: String!
  identityDocument: Float
  ssn: Float
  phoneNumber: Float!
  emailPerson: String!
  addres: String
}

input institutionInput {
  id: String
  institutionName: String!
  typeInstitution: String!
  educationalLevel: String!
  fullAddress: String
  phoneNumber: String!
  email: String
  webPage: String
  dateFounded: String
  Accreditations: String
  programStudy: String
  Director: String
  socialMedia: String
}

input createcourseinput {
  name: String!
  description: String
  professorId: String!
}

input CreateForumPostInput {
  courseId: String!
  userId: String!
  parentId: String
  content: String!
}

input createmembershipinput {
  name: String!
  price: Float!
  maxCourses: Float!
  durationInDays: Float!
}

input EnrollStudentInput {
  studentId: String!
  courseId: String!
}

input CreateTaskInput {
  courseId: String!
  title: String!
  description: String
  dueDate: DateTime!
}

input SubmitTaskInput {
  taskId: String!
  studentId: String!
  content: String
  submittedAt: DateTime!
}

input createusermembershipinput {
  userId: String!
  membershipId: String!
  startDate: DateTime!
  endDate: DateTime!
}

input CreateSubmissionInput {
  content: String!
  taskId: ID!
  studentId: ID!
  grade: Float
}

input UpdateSubmissionInput {
  content: String
  taskId: ID
  studentId: ID
  grade: Float
  id: ID!
}